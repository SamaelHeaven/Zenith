package zenith.input

import javafx.scene.input.KeyCode

enum class Key(private val fxKeyCode: KeyCode) {
    ENTER(KeyCode.ENTER),
    BACK_SPACE(KeyCode.BACK_SPACE),
    TAB(KeyCode.TAB),
    CANCEL(KeyCode.CANCEL),
    CLEAR(KeyCode.CLEAR),
    SHIFT(KeyCode.SHIFT),
    CONTROL(KeyCode.CONTROL),
    ALT(KeyCode.ALT),
    PAUSE(KeyCode.PAUSE),
    CAPS(KeyCode.CAPS),
    ESCAPE(KeyCode.ESCAPE),
    SPACE(KeyCode.SPACE),
    PAGE_UP(KeyCode.PAGE_UP),
    PAGE_DOWN(KeyCode.PAGE_DOWN),
    END(KeyCode.END),
    HOME(KeyCode.HOME),
    LEFT(KeyCode.LEFT),
    UP(KeyCode.UP),
    RIGHT(KeyCode.RIGHT),
    DOWN(KeyCode.DOWN),
    COMMA(KeyCode.COMMA),
    MINUS(KeyCode.MINUS),
    PERIOD(KeyCode.PERIOD),
    SLASH(KeyCode.SLASH),
    DIGIT0(KeyCode.DIGIT0),
    DIGIT1(KeyCode.DIGIT1),
    DIGIT2(KeyCode.DIGIT2),
    DIGIT3(KeyCode.DIGIT3),
    DIGIT4(KeyCode.DIGIT4),
    DIGIT5(KeyCode.DIGIT5),
    DIGIT6(KeyCode.DIGIT6),
    DIGIT7(KeyCode.DIGIT7),
    DIGIT8(KeyCode.DIGIT8),
    DIGIT9(KeyCode.DIGIT9),
    SEMICOLON(KeyCode.SEMICOLON),
    EQUALS(KeyCode.EQUALS),
    A(KeyCode.A),
    B(KeyCode.B),
    C(KeyCode.C),
    D(KeyCode.D),
    E(KeyCode.E),
    F(KeyCode.F),
    G(KeyCode.G),
    H(KeyCode.H),
    I(KeyCode.I),
    J(KeyCode.J),
    K(KeyCode.K),
    L(KeyCode.L),
    M(KeyCode.M),
    N(KeyCode.N),
    O(KeyCode.O),
    P(KeyCode.P),
    Q(KeyCode.Q),
    R(KeyCode.R),
    S(KeyCode.S),
    T(KeyCode.T),
    U(KeyCode.U),
    V(KeyCode.V),
    W(KeyCode.W),
    X(KeyCode.X),
    Y(KeyCode.Y),
    Z(KeyCode.Z),
    OPEN_BRACKET(KeyCode.OPEN_BRACKET),
    BACK_SLASH(KeyCode.BACK_SLASH),
    CLOSE_BRACKET(KeyCode.CLOSE_BRACKET),
    NUMPAD0(KeyCode.NUMPAD0),
    NUMPAD1(KeyCode.NUMPAD1),
    NUMPAD2(KeyCode.NUMPAD2),
    NUMPAD3(KeyCode.NUMPAD3),
    NUMPAD4(KeyCode.NUMPAD4),
    NUMPAD5(KeyCode.NUMPAD5),
    NUMPAD6(KeyCode.NUMPAD6),
    NUMPAD7(KeyCode.NUMPAD7),
    NUMPAD8(KeyCode.NUMPAD8),
    NUMPAD9(KeyCode.NUMPAD9),
    MULTIPLY(KeyCode.MULTIPLY),
    ADD(KeyCode.ADD),
    SEPARATOR(KeyCode.SEPARATOR),
    SUBTRACT(KeyCode.SUBTRACT),
    DECIMAL(KeyCode.DECIMAL),
    DIVIDE(KeyCode.DIVIDE),
    DELETE(KeyCode.DELETE),
    NUM_LOCK(KeyCode.NUM_LOCK),
    SCROLL_LOCK(KeyCode.SCROLL_LOCK),
    F1(KeyCode.F1),
    F2(KeyCode.F2),
    F3(KeyCode.F3),
    F4(KeyCode.F4),
    F5(KeyCode.F5),
    F6(KeyCode.F6),
    F7(KeyCode.F7),
    F8(KeyCode.F8),
    F9(KeyCode.F9),
    F10(KeyCode.F10),
    F11(KeyCode.F11),
    F12(KeyCode.F12),
    F13(KeyCode.F13),
    F14(KeyCode.F14),
    F15(KeyCode.F15),
    F16(KeyCode.F16),
    F17(KeyCode.F17),
    F18(KeyCode.F18),
    F19(KeyCode.F19),
    F20(KeyCode.F20),
    F21(KeyCode.F21),
    F22(KeyCode.F22),
    F23(KeyCode.F23),
    F24(KeyCode.F24),
    PRINTSCREEN(KeyCode.PRINTSCREEN),
    INSERT(KeyCode.INSERT),
    HELP(KeyCode.HELP),
    META(KeyCode.META),
    BACK_QUOTE(KeyCode.BACK_QUOTE),
    QUOTE(KeyCode.QUOTE),
    KP_UP(KeyCode.KP_UP),
    KP_DOWN(KeyCode.KP_DOWN),
    KP_LEFT(KeyCode.KP_LEFT),
    KP_RIGHT(KeyCode.KP_RIGHT),
    DEAD_GRAVE(KeyCode.DEAD_GRAVE),
    DEAD_ACUTE(KeyCode.DEAD_ACUTE),
    DEAD_CIRCUMFLEX(KeyCode.DEAD_CIRCUMFLEX),
    DEAD_TILDE(KeyCode.DEAD_TILDE),
    DEAD_MACRON(KeyCode.DEAD_MACRON),
    DEAD_BREVE(KeyCode.DEAD_BREVE),
    DEAD_ABOVEDOT(KeyCode.DEAD_ABOVEDOT),
    DEAD_DIAERESIS(KeyCode.DEAD_DIAERESIS),
    DEAD_ABOVERING(KeyCode.DEAD_ABOVERING),
    DEAD_DOUBLEACUTE(KeyCode.DEAD_DOUBLEACUTE),
    DEAD_CARON(KeyCode.DEAD_CARON),
    DEAD_CEDILLA(KeyCode.DEAD_CEDILLA),
    DEAD_OGONEK(KeyCode.DEAD_OGONEK),
    DEAD_IOTA(KeyCode.DEAD_IOTA),
    DEAD_VOICED_SOUND(KeyCode.DEAD_VOICED_SOUND),
    DEAD_SEMIVOICED_SOUND(KeyCode.DEAD_SEMIVOICED_SOUND),
    AMPERSAND(KeyCode.AMPERSAND),
    ASTERISK(KeyCode.ASTERISK),
    QUOTEDBL(KeyCode.QUOTEDBL),
    LESS(KeyCode.LESS),
    GREATER(KeyCode.GREATER),
    BRACELEFT(KeyCode.BRACELEFT),
    BRACERIGHT(KeyCode.BRACERIGHT),
    AT(KeyCode.AT),
    COLON(KeyCode.COLON),
    CIRCUMFLEX(KeyCode.CIRCUMFLEX),
    DOLLAR(KeyCode.DOLLAR),
    EURO_SIGN(KeyCode.EURO_SIGN),
    EXCLAMATION_MARK(KeyCode.EXCLAMATION_MARK),
    INVERTED_EXCLAMATION_MARK(KeyCode.INVERTED_EXCLAMATION_MARK),
    LEFT_PARENTHESIS(KeyCode.LEFT_PARENTHESIS),
    NUMBER_SIGN(KeyCode.NUMBER_SIGN),
    PLUS(KeyCode.PLUS),
    RIGHT_PARENTHESIS(KeyCode.RIGHT_PARENTHESIS),
    UNDERSCORE(KeyCode.UNDERSCORE),
    WINDOWS(KeyCode.WINDOWS),
    CONTEXT_MENU(KeyCode.CONTEXT_MENU),
    FINAL(KeyCode.FINAL),
    CONVERT(KeyCode.CONVERT),
    NONCONVERT(KeyCode.NONCONVERT),
    ACCEPT(KeyCode.ACCEPT),
    MODECHANGE(KeyCode.MODECHANGE),
    KANA(KeyCode.KANA),
    KANJI(KeyCode.KANJI),
    ALPHANUMERIC(KeyCode.ALPHANUMERIC),
    KATAKANA(KeyCode.KATAKANA),
    HIRAGANA(KeyCode.HIRAGANA),
    FULL_WIDTH(KeyCode.FULL_WIDTH),
    HALF_WIDTH(KeyCode.HALF_WIDTH),
    ROMAN_CHARACTERS(KeyCode.ROMAN_CHARACTERS),
    ALL_CANDIDATES(KeyCode.ALL_CANDIDATES),
    PREVIOUS_CANDIDATE(KeyCode.PREVIOUS_CANDIDATE),
    CODE_INPUT(KeyCode.CODE_INPUT),
    JAPANESE_KATAKANA(KeyCode.JAPANESE_KATAKANA),
    JAPANESE_HIRAGANA(KeyCode.JAPANESE_HIRAGANA),
    JAPANESE_ROMAN(KeyCode.JAPANESE_ROMAN),
    KANA_LOCK(KeyCode.KANA_LOCK),
    INPUT_METHOD_ON_OFF(KeyCode.INPUT_METHOD_ON_OFF),
    CUT(KeyCode.CUT),
    COPY(KeyCode.COPY),
    PASTE(KeyCode.PASTE),
    UNDO(KeyCode.UNDO),
    AGAIN(KeyCode.AGAIN),
    FIND(KeyCode.FIND),
    PROPS(KeyCode.PROPS),
    STOP(KeyCode.STOP),
    COMPOSE(KeyCode.COMPOSE),
    ALT_GRAPH(KeyCode.ALT_GRAPH),
    BEGIN(KeyCode.BEGIN),
    UNDEFINED(KeyCode.UNDEFINED),
    SOFTKEY_0(KeyCode.SOFTKEY_0),
    SOFTKEY_1(KeyCode.SOFTKEY_1),
    SOFTKEY_2(KeyCode.SOFTKEY_2),
    SOFTKEY_3(KeyCode.SOFTKEY_3),
    SOFTKEY_4(KeyCode.SOFTKEY_4),
    SOFTKEY_5(KeyCode.SOFTKEY_5),
    SOFTKEY_6(KeyCode.SOFTKEY_6),
    SOFTKEY_7(KeyCode.SOFTKEY_7),
    SOFTKEY_8(KeyCode.SOFTKEY_8),
    SOFTKEY_9(KeyCode.SOFTKEY_9),
    GAME_A(KeyCode.GAME_A),
    GAME_B(KeyCode.GAME_B),
    GAME_C(KeyCode.GAME_C),
    GAME_D(KeyCode.GAME_D),
    STAR(KeyCode.STAR),
    POUND(KeyCode.POUND),
    POWER(KeyCode.POWER),
    INFO(KeyCode.INFO);

    companion object {
        private val keys = HashMap<KeyCode, Key>()

        init {
            for (key in entries) {
                keys[key.fxKeyCode] = key
            }
        }

        internal fun get(fxKeyCode: KeyCode): Key {
            return keys[fxKeyCode]!!
        }
    }
}